[	
	"@flatten",
	"@include data/functions-math.cfg",
	"@include data/functions-geometry.cfg",
	"@include data/functions-list.cfg",
	

	#each element in data overwrites each element in list, starting with the element at index. If index is out of bounds or the data does not fit in the list, Bad Stuff Happensâ„¢.
	#eg., args [1,2,3,4,5], 2, ['a', 'b'] would return [1,2,'a','b',5].
	{//See next function.
		name: "_list_cat",
		args: "list, sum, delim",
		formula: "if(size(list) > 0, _list_cat(list[1:size(list)], if(sum = '', str(list[0]), sum + str(list[0])) + if(size(list) > 1, delim, ''), delim), sum)",
	},
	{//Used by list_cat_delim.
		name: "list_cat",
		args: "list",
		formula: "_list_cat(list, '', '')",
	},
	{//Used a few times.
		name: "list_cat_delim",
		args: "list, delim",
		formula: "_list_cat(list, '', delim)",
	},
	{
		name: "zip_with",
		args: "lists, criteria",
		formula: "switch(size(lists),
			0, [],
			1, lists[0],
			2, _zip_with(lists[0], lists[1], criteria),
			_zip_with(lists[0], zip_with(lists[1:size(lists)], criteria), criteria))",
	},
    
	//{//No action needed. Reimplemented in c++.
	//	name: "head",
	//	args: "list",
	//	formula: "if(size(list), list[0])",
	//},
	{//Used thrice.
		name: "tail",
		args: "list",
		formula: "if(size(list), list[1:size(list)], [])",
	},
	{//Used once in pretty_print.
		name: "last",
		args: "list",
		formula: "if(size(list), list[size(list)-1])",
	},
	
	{//See next function.
		name: "_find_index",
		args: "list, target, index",
		formula: "
			if(index < size(list),
				if(list[index] = target, 
					index, 
					_find_index(list, target, index+1)),
				null)",
	},
	

	
	{//Used five times in pretty_print.
		name: "repeat",
		args: "num, thing",
		formula: "list_cat(map(range(num), thing))",
	},
	
	{//Used twice in pretty_print.
		name: "default", //This provides a convenient wrapper for "if(very_long_variable_name, very_long_variable_name, else_this)" Perhaps 'or' could be used instead? Hm.
		args: "input, fallback",
		formula: "if(input, input, fallback)",
	},
	
	{//Used once in pretty_print.

		#list:	A list of something to be added into sum.
		#sum:	An empty member of a type which is addition-compatible with all members of the list.
		name: "flex_sum",
		args: "list, sum",
		//formula: "if(size(list), flex_sum(list[1:size(list)], sum+list[0]) ,sum)",
		formula: "fold(list or []+[sum], a+b)",
	},
	
	{
		name: "_prettyprint",
		args: "input, level",
		formula: "
			(if(
				is_map(input) or is_callable(input),
				list_cat(
					map(sort(keys(input)), 
						repeat(level*4, ' ') + q('${value}': )
						+ if(is_listable(input[value]),
							if(
								(is_callable(input[value]) and level > 0)
								or value in ['me', 'self', 'driver']
								or (not size(input[value]))
								or size(input[value]) > 10
								or (level > 1 and size(input[value]) > 5)
								or level > 2,  
								if(is_map(input[value]), //GETSTRING: This codeblock has resisted attempts to make it into a function.
									'<map, ${size(input[value])} keys>\n'
									+ if(pretty and size(input[value]), pretty + '\n', '') where pretty = _prettyprint(filter(input[value], index < switch(level, 0, 10, 1, 5, 0)), level+1),
									if(is_list(input[value]),
										'<list, ${size(input[value])} elements>\n'
										+ if(pretty and size(input[value]), pretty + '\n', '') where pretty = _prettyprint(input[value][0:switch(level, 0, 10, 1, 5, 0)], level+1),
										q#<object, ${default(input[value].type, 'no type')}>\n#
									)
								),
								'\n' + _prettyprint(input[value], level+1)
							), 
							if(
								is_string(input[value])
								and size(input[value]) > 500,
								'<string, ${size(input[value])} characters>',
								if(is_string(input[value]),
									q('${_prettyprint(input[value], 0)}'),
									_prettyprint(input[value], 0)
								)
							) + '\n'
						)
					)
				),
				if(
					is_list(input),
					list_cat(
						map(input, 
							repeat(level*4, ' ') + '${index}: '
							+ if(is_listable(value),
								if(
									(is_callable(value) and level > 0)
									or (not size(value))
									or size(value) > 10
									or (level > 1 and size(value) > 5)
									or level > 2,
									if(is_map(value), //GETSTRING: This codeblock has resisted attempts to make it into a function.
										'<map, ${size(value)} keys>\n'
										+ if(pretty and size(value), pretty + '\n', '') where pretty = _prettyprint(filter(value, index < switch(level, 0, 10, 1, 5, 0)), level+1),
										if(is_list(value),
											'<list, ${size(value)} elements>\n'
											+ if(pretty and size(value), pretty + '\n', '') where pretty = _prettyprint(value[0:switch(level, 0, 10, 1, 5, 0)], level+1),
											q#<object, ${default(value.type, 'no type')}>\n#
										)
									),
									'\n' + _prettyprint(value, level+1)
								), 
								if(
									is_string(value)
									and (size(value)) > 500,
									'<string, ${size(value)} characters>',
									if(is_string(value),
										q('${_prettyprint(value, 0)}'),
										_prettyprint(value, 0)
									)
								) + '\n'
							)
						)
					),
					if(
						is_function(input),
						repeat(level*4, ' ') + '<function>',	
						repeat(level*4, ' ') + str(input),
					)
				)
			) where
				is_listable = def(thing) is_map(thing) or is_callable(thing) or is_list(thing),
			)
		",
	},
	
	{
		name: "pp_string", //Returns string. Used if we need to dump output instead of debugging it, like pp() does.
		args: "input",
		formula: "if(not strstr(pretty, '\n'), 
				pretty,
				'\n\n\n\n===OUTPUT===\n\n' + pretty + '\n\n===FINISHED===\n\n\n\n'
				) where pretty = flex_sum(if(last(cp)='\n', cp[0:size(cp)-1], cp) where cp = split(_prettyprint(input, 0), ''), '')",
	},
	
	{
		name: "pp", //pretty-printing function.
		args: "input",
		formula: "debug(pp_string(input))",
	},
	
	//pp(find(get_save_document(0).character, value.is_human).vars.saved_maps)
	//pp(find(get_save_document(0).character, value.is_human).vars.saved_maps['Tutorial 1'])
	
	{
		name: "player_can_see",
		args: "level, obj",
		formula: "obj in level.active_chars and obj.alpha > 0 and
				  level.camera_position[0] <= obj.x-margin and 
		          level.camera_position[1] <= obj.y-margin and
		          level.camera_position[0]+level.camera_position[2] >= obj.x+obj.img_w+margin and
		          level.camera_position[1]+level.camera_position[3] >= obj.y+obj.img_h+margin
		          where margin = 20",
	},
	
	{
		name: "can_see",
		args: "level, obj1, obj2",
		formula: "abs(obj1.mid_x - obj2.mid_x) < level.camera_position[2]/2 and
		          abs(obj1.mid_y - obj2.mid_y) < level.camera_position[3]/2 and
		          obj2.alpha and true or false",
	},
	
	

	"@flatten",
	"@include data/functions-custom.cfg", //Defined in modules.
]
