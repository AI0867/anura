[	
	"@flatten",
	"@include data/functions-math.cfg",
	"@include data/functions-geometry.cfg",
	"@include data/functions-list.cfg",
	
	{

		#list:	A list of something to be added into sum.
		#sum:	An empty member of a type which is addition-compatible with all members of the list.
		name: "flex_sum",
		args: "list, sum",
		//formula: "if(size(list), flex_sum(list[1:size(list)], sum+list[0]) ,sum)",
		formula: "fold(list or []+[sum], a+b)",
	},
	
	{
		name: "pp_string", //Returns string. Used if we need to dump output instead of debugging it, like pp() does.
		args: "input",
		formula: "if(not strstr(pretty, '\n'), 
				pretty,
				'\n\n\n\n===OUTPUT===\n\n' + pretty + '\n\n===FINISHED===\n\n\n\n'
				) where pretty = flex_sum(if(last(cp)='\n', cp[0:size(cp)-1], cp) where cp = split(_prettyprint(input, 0), ''), '')",
	},
	
	{
		name: "player_can_see",
		args: "level, obj",
		formula: "obj in level.active_chars and obj.alpha > 0 and
				  level.camera_position[0] <= obj.x-margin and 
		          level.camera_position[1] <= obj.y-margin and
		          level.camera_position[0]+level.camera_position[2] >= obj.x+obj.img_w+margin and
		          level.camera_position[1]+level.camera_position[3] >= obj.y+obj.img_h+margin
		          where margin = 20",
	},
	
	{
		name: "can_see",
		args: "level, obj1, obj2",
		formula: "abs(obj1.mid_x - obj2.mid_x) < level.camera_position[2]/2 and
		          abs(obj1.mid_y - obj2.mid_y) < level.camera_position[3]/2 and
		          obj2.alpha and true or false",
	},
	
	

	"@flatten",
	"@include data/functions-custom.cfg", //Defined in modules.
]
