{
	choose_sound: "def(string sound_name) ->string|null

	choose(sound_choices(sound_name))

	",

	sound_choices: "def(string sound_name) ->[string]
	query_cache(global_cache(32), sound_name,
		map(filter(files, lower(value[:size(fname)]) = fname), dir[7:] + value)
		where files = query_cache(global_cache(16), dir, get_files_in_dir(dir))
		where dir = p[0]
		where fname = p[1]
		where p = [string,string]<- regex_match('sounds/' + sound_name, '(.*/)(.*)')
	)
	",

	log_sounds: { type: "bool", default: false },

	play_sound: "def(custom_obj obj, string sound_name, null|{ embargo: int } args=null) ->commands
	if(mm_obj != null and (embargo <= 0 or mm_obj.sound_embargoes[sound_name] = null or mm_obj.sound_embargoes[sound_name] < mm_obj.cycle),
	[
		if(embargo > 0, [
			set(mm_obj.sound_embargoes[sound_name], mm_obj.cycle+embargo)
		]),

		if(log_sounds, mm_obj.log_sound(obj, sound_name, sound)),
		if(sound != null, mm_obj.play_sound(obj, sound, sound_volume(sound), sound_delay(sound))),
	])
		where mm_obj = find((level<- obj.level).chars, value is obj sound_master_controller)
		where sound = choose_sound(sound_name)
		where embargo = if(args = null, 0, args.embargo)
	",

	_sound_delays_written: { type: "{string -> decimal}", default: {} },
	_sound_volumes_written: { type: "{string -> decimal}", default: {} },

	set_sound_volume: "def(string fname, decimal value) ->commands
	[
	set(_sound_volumes_written[fname], value);
	write_document('data/sound-volume.cfg', (map<- get_document('data/sound-volume.cfg')) + _sound_volumes_written, ['game_dir'])
	]
	",
	
	sound_volume: "def(string fname) ->decimal
	if(fname in _sound_volumes_written, _sound_volumes_written[fname],
	   fname in volumes, volumes[fname], 1.0)
	  where volumes = {string -> decimal}<- get_document('data/sound-volume.cfg')",

	set_sound_delay_seconds: "def(string fname, decimal value) ->commands
	[
	set(_sound_delays_written[fname], value);
	write_document('data/sound-delay.cfg', (map<- get_document('data/sound-delay.cfg')) + _sound_delays_written, ['game_dir'])
	]
	",

	sound_delay_seconds: "def(string fname) ->decimal
	if(fname in _sound_delays_written, _sound_delays_written[fname],
	   fname in delays, delays[fname], 0.0)
	  where delays = {string -> decimal}<- get_document('data/sound-delay.cfg')",
	
	sound_delay: "def(string fname) ->int
	int(round(sound_delay_seconds(fname)*60.0))
	",
}
