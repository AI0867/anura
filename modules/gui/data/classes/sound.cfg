{
	is_library: true,

	new_game: "def() ->commands set(voice_embargoes, {})",

	hz: "decimal :: 60.0",

	is_voice_playing: "def(custom_obj obj) ->bool
		find(obj.audio.current_sounds, strstr(value.filename, 'voices') != 0) != null
	",

	voice_embargoes: { type: "{string -> bool}", default: {} },

	have_possible_sound: "def(string sound_name) ->bool
		find(sound_choices(sound_name), value not in voice_embargoes) != null
	",

	choose_sound: "def(string sound_name) ->string|null

	choose(filter(sound_choices(sound_name), value not in voice_embargoes))

	",

	sound_choices: "def(string sound_name) ->[string]
	query_cache(global_cache(32), sound_name,
		map(filter(files, lower(value[:size(fname)]) = fname), dir[7:] + value)
		where files = query_cache(global_cache(16), dir, get_files_in_dir(dir))
		where dir = p[0]
		where fname = lower(p[1])
		where p = [string,string]<- regex_match('sounds/' + sound_name, '(.*/)(.*)')
	)
	",

	log_sounds: { type: "bool", default: false },

	reverb: "def(custom_obj obj, string sound_name) ->commands
		map(range(16), obj.audio.sound(sound_name, {
			pos: -if(value = 0, 0.0, 0.01 + value*0.005),
			volume: 1.0 / (1.5^value),
			filters: [
				obj.audio.speed_filter({
					speed: if(index = 0, 1.0, 0.98),
				})
			],
		}).play())
	",

	prepare_sound: "def(custom_obj obj, string sound_name, SoundInfo args={}) ->null|PreparedSound
	if(sound != null,
		{
			sound: sound,
			info: info,
		}

		where sound = obj.audio.sound(sound, {
			volume: (info.volume or 1.0) * get_layer_volume(info.layer or 'default') * volume_variation,
			pos: -(info.delay or 0.0),
			filters: if(pitch_variation != 1.0, [obj.audio.speed_filter({ speed: pitch_variation })], [])
		} )
		where pitch_variation = _rand_range(info.pitch_variation)
		where volume_variation = _rand_range(info.volume_variation)
		where info = (get_sound_info(sound_name, sound) + args)
	)
	where sound = choose_sound(sound_name)
	",

	_rand_range: "def(null|[decimal,decimal] r, decimal default_value=1.0) ->decimal
		if(r = null, default_value, r.x + ((r.y - r.x)*1d1000)/1000.0)
	",

	play_prepared_sound: "def(custom_obj obj, PreparedSound sfx, string sound_name) ->commands
	if(is_embargoed(obj, sound_name) = false,
	[
		if(strstr(sfx.sound.filename, 'voices') != 0,
			set(voice_embargoes[sfx.sound.filename], true)
		),

		if(log_sounds,
			if(logger,
				logger.add_entry(obj, sound_name, sfx.sound.filename)
			)
			where logger = find((level<- obj.level).chars, value is obj sound_log)
		),

		sfx.sound.play(),

		if(sfx.info.embargo,
			add_embargo(obj, sound_name, sfx.info.embargo)
		)
	]
	)
	",

	_layer_volumes: { type: "{string -> decimal}", default: {} },
	get_layer_volume: "def(string id) ->decimal
		if(result = null, 1.0, result)
		where result = _layer_volumes[id]
	",

	set_layer_volume: "def(string id, decimal volume) ->commands
		set(_layer_volumes[id], volume)
	",

	is_embargoed: "def(custom_obj obj, string id) ->bool
	if(embargo = null, false,

	unix < embargo.unix or unix = embargo.unix and (level<- obj.level).cycle < embargo.cycle

	where unix = time().unix
	)
	where embargo = embargoes[id]
	",

	add_embargo: "def(custom_obj obj, string id, decimal delay) ->commands
	set(embargoes[id], { unix: unix, cycle: cycle })
	where cycle = int((level<- obj.level).cycle + delay*hz)
	where unix = int(time().unix + delay)
	",

	embargoes: {
		type: "{ string -> { unix: int, cycle: int } }",
		default: {},
	},

	play_sound: "def(custom_obj obj, string sound_name, SoundInfo args={}) ->commands
	if(sfx != null, play_prepared_sound(obj, sfx, sound_name))
	where sfx = prepare_sound(obj, sound_name, args)
	",

	get_sound_info: "def(string sound_event, string sound_fname) ->SoundInfo
	SoundInfo<- (sound_info[info.layer or 'default'] + info)
	where info = SoundInfo<- (sound_info[sound_event] or {}) + (sound_info[sound_fname] or {})
	",

	set_sound_volume: "def(string fname, decimal value) ->commands
	[
		set(info.volume, value);
		write_sound_info()
	]
	where info = sound_info[fname] or {}
	",
	
	sound_volume: "def(string fname) ->decimal
	if(info and ('volume' in info), info.volume or 1.0, 1.0)
	where info = sound_info[fname]
	",

	set_sound_delay_seconds: "def(string fname, decimal value) ->commands
	[
		set(info.delay, value);
		write_sound_info()
	]
	where info = sound_info[fname] or {}
	",

	sound_delay: "def(string fname) ->decimal
	if(info, info.delay or 0.0, 0.0)
	where info = sound_info[fname]
	",

	sound_info: {
		type: "{string -> SoundInfo}",
		init: "{string -> SoundInfo}<- get_document('data/sound-info.cfg') or {}",
		set: "[set(_data, value); write_sound_info()]",
	},

	write_sound_info: "def() ->commands
		
		write_document('data/sound-info.cfg', sound_info, [enum game_dir])
	",
}
