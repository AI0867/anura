{
	id: "particle_controller",
	hidden_in_game: true,
	is_strict: true,

	properties: {
		_type: {
			type: "ParticleSystemInfo",
			set_type: "string|ParticleSystemInfo",
			set: "[
				set(_data, value),
				set(particles, info.info),
			] where info = if(value is string, ParticleSystemInfo<- get_document(sprintf('data/particles/%s.cfg', value)), value)
			",
		},

		emission_rate: {
			variable: false,
			type: "any",
			set: "set(particles.emission_rate, value) asserting particles != null",
			get: "particles.emission_rate asserting particles != null",
		},

		time_to_live: {
			default: -1.0,
			type: "decimal",
			set: "[set(_data, value), if(value = 0, remove_object(me))]",
		},

		fade_away_and_die: "def(int ncycles=20) ->commands
		execute(me,
		animate(me, {
			emission_rate: 0.0,
		}, {
			duration: ncycles,
			on_complete: remove_object(me)
		})
		)
		",

		follow_obj: { type: "null|custom_obj" },

		apply_animation: "def(ParticleSystemAnimation anim) ->commands
		animate(me, {
			(anim.attribute): anim.target,
		}, {
			duration: anim.duration,
			easing: lib.easing.get(anim.easing),
		})
		",
	},
	
	events: {
		create: "
			if(_type.animations, map(_type.animations, apply_animation(value)))
		",

		process: "
		if(follow_obj != null, [
			set(x, follow_obj.mid_x),
			set(y, follow_obj.mid_y),
		])",
	},
}
