{
	id: "title_controller_base",
	prototype: ["matchmaking_base"],
	is_strict: true,
	hidden_in_game: true,

	properties: {
		level_width: "int<- level.dimensions[2]",
		level_height: "int<- level.dimensions[3]",

		game_logo: { type: "null|obj game_icon" },
		game_title: { type: "null|obj label" },

		_removed_widgets: { type: "[custom_obj]", default: [] },

		_concede_client: { type: "object|null" },

		server_status_label: { type: "null|obj label" },

		update_server_status_label: "def() ->commands
		if(server_status_label != null,
			if(txt != server_status_label.get_text(), server_status_label.set_text(txt))
		where txt = if(num_users is int, [str(num_users) + 'players online | ' + str(num_games) + ' games being played'], ['Getting server status...'])
		)
		",

		game_port: { type: "int|null" },
		game_session: { type: "int|null" },
		game_id: { type: "int|null" },

		num_users: "int|null :: _mm_client_state.num_users",
		num_queued: "int|null :: _mm_client_state.num_queued",
		num_games: "int|null :: _mm_client_state.num_games",

		show_ui: "def() ->commands
			[ remove_object(c) | c <- level.chars, c != me ];
		[
			spawn('label', {
				x: lib.gui.py(104),
				mid_y: lib.gui.py(76),
				_font_size: lib.gui.py(14),
				_text: ['Status'],
				_halign: 'left',
			}, [
				set(server_status_label, child)
			]),

			spawn('chat_widget', {
				x: lib.gui.py(16),
				y: chat_widget_y,
				_width: lib.gui.py(380),
				_height: lib.gui.py(884) - chat_widget_y,
			}, [
			]) where chat_widget_y = lib.gui.py(1080 - 452),

			_present_ui(),
		]

		",

		_present_ui: "def() ->commands null",

		return_to_titlescreen: "def() ->commands execute(me,
			teleport('titlescreen.cfg', '', 'instant')
		)",

		update_server: "def() ->commands [
			execute(me, tbs_send(object<- mm_client, { type: 'admin_operation', script: 'update' })),
			set(_server_output_pending, true),
			query_server_admin_progress(),
		]",

		restart_server: "def() ->commands [
			execute(me, tbs_send(object<- mm_client, { type: 'admin_operation', script: 'restart', replace_process: true }))
		]",

		_server_output_pending: { type: "bool", default: false },

		query_server_admin_progress: "def() ->commands ; if(_server_output_pending,[
			execute(me, tbs_send(object<- mm_client, { type: 'admin_operation', get_command_output: true })),
			schedule(60, query_server_admin_progress())
		])",

		delete_account: "def() ->commands [
			execute(me, tbs_send(object<- mm_client, { type: 'delete_account' }))
		]",

		reset_passwd: "def(string new_pass) ->commands [
			execute(me, tbs_send(object<- mm_client, { type: 'reset_passwd', passwd: md5(new_pass) }))
		]",

		send_global_chat: "def(string msg) ->commands [
			execute(me, tbs_send(object<- mm_client, { type: 'global_chat', message: msg }))
		]",

		send_cancel_matchmaking_request: "def() ->commands [
			tbs_send(object<- mm_client, { type: 'cancel_matchmake', user: _mm_client_state.username, }),
		]",

		send_matchmaking_request: "def(map game_type) ->commands [
			tbs_send(object<- mm_client, { type: 'matchmake', game_info: game_type, user: _mm_client_state.username, }),

		]",

		set_avatar: "def(string avatar) ->commands [
			tbs_send(object<- mm_client, { type: 'set_avatar', avatar: avatar, user: _mm_client_state.username }),
			set(account_info.avatar, avatar),
		]",

		issue_challenge: "def(string user) ->commands [
			tbs_send(object<- mm_client, { type: 'challenge', user: user }),
		]",

		concede_game: "def(string host, int port, int session_id) ->commands
		execute(me, [
			tbs_send(client, { type: 'concede' }),
			set(_concede_client, client),
			log(['send concede',host,port,session_id]),
		] where client = tbs_client(host, port, session_id))",
		
		show_reconnection_dialog: "def(int game_port, int game_id, int game_session) ->commands
		execute(me,
		[
			object('modal_message_dialog', {
				_exclude_from_pause: [me],
				message: 'You disconnected from a game. Do you want to reconnect?',
				buttons: [{
					text: 'Reconnect',
					callback: (def() ->commands join_game(string<- TBS_SERVER_ADDRESS, game_port, game_session)),
				}, {
					text: 'Abandon',
					callback: (def() ->commands concede_game(string<- TBS_SERVER_ADDRESS, game_port, game_session)),
				}
				]
			}).show_dialog()
		])",

		join_game: "def(string host, int port, int|null session_id_override=null) ->commands null",

		request_observe_game: "def(string username) ->commands null",
		observe_game: "def(GameServer server, string|null username=null, int|null session_override=null) -> commands null",

		click_challenge: "def(string username) ->commands null",


		enter_settings: "def() ->commands
		execute(me,
		[
			spawn('settings_screen',  {
				title_controller: me,
				mid_x: level_width/2,
				mid_y: level_height/2,
				_possible_avatars: possible_avatars,
			}
			)
		])
		",

		possible_avatars: "[string] :: []",

		_logging_out: { type: "bool", default: false },

		_handle_logout: "def() ->commands execute(me, [
			tbs_send(object<- mm_client, { type: 'quit_game' }),
			set(_logging_out, true),
			lib.tbs.write_cookie(null),
			schedule(180, teleport('titlescreen.cfg', '', 'instant', object_playable('login_controller', 0, 0, 0))),
		])",

		quit_game: "def() ->commands [
			execute(me, tbs_send(object<- mm_client, { type: 'quit_game' })),
			schedule(120, quit_to_desktop()),
		]
		",

		create: "def() ->commands null",
		process: "def() ->commands null",

		setup_screen_dim: "def() ->commands [
			if(decimal(level.dimensions[2])/decimal(level.dimensions[3]) < 1.77,
			[
				set(level.dimensions, [0,0,level.dimensions[2],new_height]),
				set(level.absolute_object_adjust_y, (level.dimensions[3] - new_height)/2), 
			] where new_height = int(level.dimensions[2]/1.777777)
			);

			set(lib.gui.screen_width, level.dimensions[2]);
			set(lib.gui.screen_height, level.dimensions[3])
		]",

		recent_games: { type: "list", default: [] },
		recent_games_updated: "def() -> commands null",

		start_replay: "def(map replay) ->commands null",

		start_game: "def() ->commands null",
	},

	events: {
		create: "setup_screen_dim(); [
			set(level.fb_render_target, {blend_enable: true}),
			set_user_info('user', _mm_client_state.username),

			set(x, 0),
			set(y, 0),

			show_ui(),

			create(),
		]",

		settings_menu: "
		[
			set(level.show_builtin_settings_dialog, false),
			if(menu, remove_object(menu),

			spawn('game_menu_controller', {
				_exclude_from_pause: [me],
				buttons: [
				{
					text: 'Settings',
					callback: me.enter_settings,
				},
				{
					text: 'Resume',
					callback: (def()->commands null),
				},
				{
					text: 'Change User',
					callback: me._handle_logout,
					pad: lib.gui.py(40),
				},
				{
					text: 'Exit Game',
					callback: me.quit_game,
				},
				]
			})
			)
		]
		where menu = find(level.chars, value is obj game_menu_controller)
		",

		process: "[
			process(),
			if(_concede_client, [tbs_process(_concede_client), if(_concede_client.in_flight = 0, set(_concede_client, null))]),

			update_server_status_label(),

		]",

	type_updated: "show_ui()",

    "+connection_error": "teleport('titlescreen.cfg', '', 'instant', object_playable('login_controller', 0, 0, 0))",
    
	"+connection_success": "null",

	"+matchmake_message_received": "[
	//log(['MATCHMAKE:', message.type, message]),
	matchmaking_handle_message(message),
	switch(message.type,
		'quit_ack', [
			if(_logging_out,
				teleport('titlescreen.cfg', '', 'instant', object_playable('login_controller', 0, 0, 0)),
				quit_to_desktop()
			)
		],

		'message', [
			spawn_notification(string<- message.message)
		],

		'error', [
			spawn_notification(string<- message.message)
		],

		'recent_games', [
			set(recent_games, games);
			recent_games_updated()
		]
		  where games = list<- message.game_info,

		'matchmaking_queued', [
			log('queued matchmaking'),
		],

		'replay', start_replay(message),

		'match_made', join_game(if(message.host, string<- message.host, TBS_SERVER_ADDRESS), if(message.port, int<- message.port, TBS_SERVER_PORT)),

		'heartbeat', [

			if(server_info, [
				set(me.game_port, int|null<- message.game_port),
				set(me.game_session, int|null<- message.game_session),
				set(me.game_id, int|null<- message.game_id),
			])

		] where server_info = map|null<- message.server_info,

		'admin_busy', [
			//spawn_notification('The server is busy executing a command already')
		],
		'admin_message', [
			spawn_notification(string<- message.message),
			if(message.complete, set(_server_output_pending, false))
		],
	)
	] where message = map<- arg.message",
	
	message_received: "[
	 log('message: ' + str(message.type)),
	switch(message.type,
		'game_created', 
		start_game(),

		'server_info',
		[],
		'heartbeat', [
		],

		log('UNKNOWN MESSAGE RECIEVED: ' + str(message.type))
	) asserting message.type != 'error']
	  where message = map<- arg.message",

	},
}
